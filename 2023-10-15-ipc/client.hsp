; クライアントアプリ

; サーバーから起動される

#packopt name "client"

#include "mod_pipe_rw.hsp"

#module

#define error(%1) logmes (%1) : dialog ("ERROR: " + (%1)), 1 : end : end
#define WM_APP 0x8000

#deffunc app_entrypoint

	title "client"

	; window setup
	font "Cascadia Mono", 14
	objmode objmode_usefont
	pos 8, 8
	sdim s_input_buf, 0x200
	input s_input_buf, 280, 40
	s_input_id = stat

	pos 8 + 280 + 8, 8
	objsize 120, 40
	button gosub "Send", *l_send_message

	pos 8, 8 + 40 + 8

	; parse cmdline
	logmes "cmdline = " + dir_cmdline
	mes dir_cmdline
	cmdline = dir_cmdline
	split cmdline, " ", args
	input_pipe = ""
	output_pipe = ""
	server_hwnd_arg = ""
	repeat length(args)
		if strmid(args(cnt), 0, 8) == "--input=" {
			input_pipe = strmid(args(cnt), 8, 0xFFFF)
			continue
		}
		if strmid(args(cnt), 0, 9) == "--output=" {
			output_pipe = strmid(args(cnt), 9, 0xFFFF)
			continue
		}
		if strmid(args(cnt), 0, 14) == "--server-hwnd=" {
			server_hwnd_arg = strmid(args(cnt), 14, 0xFFFF)
			continue
		}
	loop

	; wait 300

	if input_pipe == "" {
		error "WARN: --input missing"
	}
	if output_pipe == "" {
		error "WARN: --output missing"
	}
	if server_hwnd_arg == "" {
		error "WARN: --server-hwnd missing"
	}

	mes "input = " + input_pipe
	mes "output = " + output_pipe
	mes "server-hwnd = " + server_hwnd_arg

	pipe_rw_open_read input_pipe
	s_input_pipe_id = stat
	if s_input_pipe_id < 0 {
		error "WARN: input_pipe not opened"
	}
	s_input_available = true
	mes "input connected"

	pipe_rw_open_write output_pipe
	s_output_pipe_id = stat
	if s_output_pipe_id < 0 {
		error "WARN: output_pipe not opened"
	}
	s_output_available = true
	mes "output connected"

	s_server_hwnd = int(server_hwnd_arg)
	; 101: hello, lp: clinet hwnd
	mes "notify hello hwnd=" + hwnd
	sendmsg s_server_hwnd, WM_APP, 101, hwnd

	buf_size = 0x1000
	sdim buf, buf_size
	ping_count = 0
	pong_count = 0

	oncmd gosub *on_app, WM_APP

	mes "stop"

	; repeat
	; 	s_input_buf = "send: " + cnt
	; 	gosub *l_send_message
	; 	await 100
	; loop
	stop

*on_app

	mes strf("wm_app: wp=%d, lp=%d", wparam, lparam)
	wp = wparam
	lp = lparam

	; messages are sent from the server
	if wp == 201 {
		msg_size = lp

		; expand the buffer to hold the message
		if buf_size <= msg_size {
			buf_size = limit(msg_size + 1, buf_size * 2, 0x7fffffff)
			assert buf_size - 1 >= msg_size
			memexpand buf, buf_size
		}

		pipe_rw_read_block s_input_pipe_id, buf, buf_size - 1
		read_size = stat
		if read_size < 0 {
			error "read"
		}

		gosub *l_handle_message
		return 0
	}

	return -1

; use (buf, read_si)
*l_handle_message

	gosub *l_page_break

	msg_contents = strmid(buf, 0, read_size)
	mes "received: '" + msg_contents + "'"

	; send a message back
	msg_contents = "pong: " + msg_contents
	msg_size = strlen(msg_contents)
	pong_count++
	mes "writing: '" + msg_contents + "' (" + msg_size + ")"
	pipe_rw_write_block s_output_pipe_id, msg_contents, msg_size
	if stat < 0 {
		error "write"
	}
	; notify written
	sendmsg s_server_hwnd, WM_APP, 102, msg_size
	return

*l_send_message

	gosub *l_page_break

	msg_contents = s_input_buf
	msg_size = strlen(msg_contents)
	if msg_size == 0 {
		objsel s_input_id
		return
	}

	ping_count++
	mes "writing: '" + msg_contents + "' (" + msg_size + ")"
	pipe_rw_write_block s_output_pipe_id, msg_contents, msg_size
	if stat < 0 {
		error "write"
	}
	; notify written
	sendmsg s_server_hwnd, WM_APP, 102, msg_size

	s_input_buf = ""
	objprm s_input_id, s_input_buf
	objsel s_input_id
	return

*l_page_break

	if ping_count + pong_count < 5 {
		return
	}

	ping_count = 0
	pong_count = 0
	s_reset_requested = 0

	redraw 2
	hsvcolor , , 255 ; white
	boxf

	color
	pos 10, 8 + 40 + 8
	redraw
	return

#global

	app_entrypoint
