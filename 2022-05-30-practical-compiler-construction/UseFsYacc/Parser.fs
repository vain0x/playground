// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open FSharp.Text.Lexing
open Syntax

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | SEMI
  | COMMA
  | RP
  | LP
  | RS
  | LS
  | RB
  | LB
  | DIV
  | TIMES
  | MINUS
  | PLUS
  | LE
  | GE
  | LT
  | GT
  | NEQ
  | EQ
  | ASSIGN
  | STR of (string)
  | ID of (string)
  | VOID
  | TYPE
  | RETURN
  | NEW
  | INT
  | IPRINT
  | SPRINT
  | SCAN
  | WHILE
  | ELSE
  | IF
  | NUM of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_RP
    | TOKEN_LP
    | TOKEN_RS
    | TOKEN_LS
    | TOKEN_RB
    | TOKEN_LB
    | TOKEN_DIV
    | TOKEN_TIMES
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_NEQ
    | TOKEN_EQ
    | TOKEN_ASSIGN
    | TOKEN_STR
    | TOKEN_ID
    | TOKEN_VOID
    | TOKEN_TYPE
    | TOKEN_RETURN
    | TOKEN_NEW
    | TOKEN_INT
    | TOKEN_IPRINT
    | TOKEN_SPRINT
    | TOKEN_SCAN
    | TOKEN_WHILE
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_prog
    | NONTERM_ty
    | NONTERM_decs
    | NONTERM_dec
    | NONTERM_ids
    | NONTERM_fargs_opt
    | NONTERM_fargs
    | NONTERM_stmts
    | NONTERM_stmt
    | NONTERM_aargs_opt
    | NONTERM_aargs
    | NONTERM_block
    | NONTERM_expr
    | NONTERM_cond

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | SEMI  -> 1 
  | COMMA  -> 2 
  | RP  -> 3 
  | LP  -> 4 
  | RS  -> 5 
  | LS  -> 6 
  | RB  -> 7 
  | LB  -> 8 
  | DIV  -> 9 
  | TIMES  -> 10 
  | MINUS  -> 11 
  | PLUS  -> 12 
  | LE  -> 13 
  | GE  -> 14 
  | LT  -> 15 
  | GT  -> 16 
  | NEQ  -> 17 
  | EQ  -> 18 
  | ASSIGN  -> 19 
  | STR _ -> 20 
  | ID _ -> 21 
  | VOID  -> 22 
  | TYPE  -> 23 
  | RETURN  -> 24 
  | NEW  -> 25 
  | INT  -> 26 
  | IPRINT  -> 27 
  | SPRINT  -> 28 
  | SCAN  -> 29 
  | WHILE  -> 30 
  | ELSE  -> 31 
  | IF  -> 32 
  | NUM _ -> 33 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_SEMI 
  | 2 -> TOKEN_COMMA 
  | 3 -> TOKEN_RP 
  | 4 -> TOKEN_LP 
  | 5 -> TOKEN_RS 
  | 6 -> TOKEN_LS 
  | 7 -> TOKEN_RB 
  | 8 -> TOKEN_LB 
  | 9 -> TOKEN_DIV 
  | 10 -> TOKEN_TIMES 
  | 11 -> TOKEN_MINUS 
  | 12 -> TOKEN_PLUS 
  | 13 -> TOKEN_LE 
  | 14 -> TOKEN_GE 
  | 15 -> TOKEN_LT 
  | 16 -> TOKEN_GT 
  | 17 -> TOKEN_NEQ 
  | 18 -> TOKEN_EQ 
  | 19 -> TOKEN_ASSIGN 
  | 20 -> TOKEN_STR 
  | 21 -> TOKEN_ID 
  | 22 -> TOKEN_VOID 
  | 23 -> TOKEN_TYPE 
  | 24 -> TOKEN_RETURN 
  | 25 -> TOKEN_NEW 
  | 26 -> TOKEN_INT 
  | 27 -> TOKEN_IPRINT 
  | 28 -> TOKEN_SPRINT 
  | 29 -> TOKEN_SCAN 
  | 30 -> TOKEN_WHILE 
  | 31 -> TOKEN_ELSE 
  | 32 -> TOKEN_IF 
  | 33 -> TOKEN_NUM 
  | 36 -> TOKEN_end_of_input
  | 34 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_prog 
    | 2 -> NONTERM_ty 
    | 3 -> NONTERM_ty 
    | 4 -> NONTERM_ty 
    | 5 -> NONTERM_decs 
    | 6 -> NONTERM_decs 
    | 7 -> NONTERM_dec 
    | 8 -> NONTERM_dec 
    | 9 -> NONTERM_dec 
    | 10 -> NONTERM_dec 
    | 11 -> NONTERM_ids 
    | 12 -> NONTERM_ids 
    | 13 -> NONTERM_fargs_opt 
    | 14 -> NONTERM_fargs_opt 
    | 15 -> NONTERM_fargs 
    | 16 -> NONTERM_fargs 
    | 17 -> NONTERM_stmts 
    | 18 -> NONTERM_stmts 
    | 19 -> NONTERM_stmt 
    | 20 -> NONTERM_stmt 
    | 21 -> NONTERM_stmt 
    | 22 -> NONTERM_stmt 
    | 23 -> NONTERM_stmt 
    | 24 -> NONTERM_stmt 
    | 25 -> NONTERM_stmt 
    | 26 -> NONTERM_stmt 
    | 27 -> NONTERM_stmt 
    | 28 -> NONTERM_stmt 
    | 29 -> NONTERM_stmt 
    | 30 -> NONTERM_stmt 
    | 31 -> NONTERM_stmt 
    | 32 -> NONTERM_aargs_opt 
    | 33 -> NONTERM_aargs_opt 
    | 34 -> NONTERM_aargs 
    | 35 -> NONTERM_aargs 
    | 36 -> NONTERM_block 
    | 37 -> NONTERM_expr 
    | 38 -> NONTERM_expr 
    | 39 -> NONTERM_expr 
    | 40 -> NONTERM_expr 
    | 41 -> NONTERM_expr 
    | 42 -> NONTERM_expr 
    | 43 -> NONTERM_expr 
    | 44 -> NONTERM_expr 
    | 45 -> NONTERM_expr 
    | 46 -> NONTERM_expr 
    | 47 -> NONTERM_cond 
    | 48 -> NONTERM_cond 
    | 49 -> NONTERM_cond 
    | 50 -> NONTERM_cond 
    | 51 -> NONTERM_cond 
    | 52 -> NONTERM_cond 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 36 
let _fsyacc_tagOfErrorTerminal = 34

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | RP  -> "RP" 
  | LP  -> "LP" 
  | RS  -> "RS" 
  | LS  -> "LS" 
  | RB  -> "RB" 
  | LB  -> "LB" 
  | DIV  -> "DIV" 
  | TIMES  -> "TIMES" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | LE  -> "LE" 
  | GE  -> "GE" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | NEQ  -> "NEQ" 
  | EQ  -> "EQ" 
  | ASSIGN  -> "ASSIGN" 
  | STR _ -> "STR" 
  | ID _ -> "ID" 
  | VOID  -> "VOID" 
  | TYPE  -> "TYPE" 
  | RETURN  -> "RETURN" 
  | NEW  -> "NEW" 
  | INT  -> "INT" 
  | IPRINT  -> "IPRINT" 
  | SPRINT  -> "SPRINT" 
  | SCAN  -> "SCAN" 
  | WHILE  -> "WHILE" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | RP  -> (null : System.Object) 
  | LP  -> (null : System.Object) 
  | RS  -> (null : System.Object) 
  | LS  -> (null : System.Object) 
  | RB  -> (null : System.Object) 
  | LB  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | STR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VOID  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | NEW  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | IPRINT  -> (null : System.Object) 
  | SPRINT  -> (null : System.Object) 
  | SCAN  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 5us; 65535us; 10us; 12us; 17us; 18us; 21us; 38us; 27us; 38us; 35us; 36us; 1us; 65535us; 98us; 10us; 1us; 65535us; 10us; 11us; 2us; 65535us; 12us; 13us; 32us; 33us; 2us; 65535us; 21us; 22us; 27us; 28us; 2us; 65535us; 21us; 34us; 27us; 34us; 1us; 65535us; 10us; 40us; 6us; 65535us; 0us; 2us; 10us; 42us; 40us; 41us; 56us; 57us; 58us; 59us; 63us; 64us; 2us; 65535us; 85us; 86us; 102us; 103us; 2us; 65535us; 85us; 94us; 102us; 94us; 8us; 65535us; 0us; 92us; 10us; 92us; 23us; 24us; 29us; 30us; 40us; 92us; 56us; 92us; 58us; 92us; 63us; 92us; 23us; 65535us; 44us; 45us; 47us; 48us; 50us; 51us; 54us; 114us; 61us; 114us; 71us; 72us; 85us; 97us; 89us; 90us; 95us; 96us; 102us; 97us; 105us; 106us; 121us; 108us; 122us; 109us; 123us; 110us; 124us; 111us; 125us; 112us; 126us; 113us; 128us; 115us; 129us; 116us; 130us; 117us; 131us; 118us; 132us; 119us; 133us; 120us; 2us; 65535us; 54us; 55us; 61us; 62us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 9us; 11us; 13us; 16us; 19us; 22us; 24us; 31us; 34us; 37us; 46us; 70us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 4us; 4us; 19us; 20us; 28us; 2us; 5us; 36us; 1us; 5us; 2us; 7us; 9us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 3us; 9us; 11us; 12us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 2us; 11us; 12us; 1us; 11us; 1us; 11us; 2us; 14us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 2us; 17us; 36us; 1us; 17us; 1us; 18us; 3us; 19us; 20us; 28us; 1us; 19us; 5us; 19us; 41us; 42us; 43us; 44us; 1us; 19us; 1us; 20us; 5us; 20us; 41us; 42us; 43us; 44us; 1us; 20us; 1us; 20us; 5us; 20us; 41us; 42us; 43us; 44us; 1us; 20us; 2us; 21us; 22us; 2us; 21us; 22us; 2us; 21us; 22us; 2us; 21us; 22us; 2us; 21us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 5us; 25us; 41us; 42us; 43us; 44us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 5us; 29us; 41us; 42us; 43us; 44us; 1us; 29us; 1us; 30us; 1us; 31us; 2us; 33us; 34us; 1us; 34us; 5us; 34us; 41us; 42us; 43us; 44us; 5us; 35us; 41us; 42us; 43us; 44us; 1us; 36us; 1us; 36us; 1us; 37us; 3us; 38us; 39us; 40us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 5us; 40us; 41us; 42us; 43us; 44us; 1us; 40us; 5us; 41us; 41us; 42us; 43us; 44us; 5us; 41us; 42us; 42us; 43us; 44us; 5us; 41us; 42us; 43us; 43us; 44us; 5us; 41us; 42us; 43us; 44us; 44us; 5us; 41us; 42us; 43us; 44us; 45us; 5us; 41us; 42us; 43us; 44us; 46us; 10us; 41us; 42us; 43us; 44us; 47us; 48us; 49us; 50us; 51us; 52us; 5us; 41us; 42us; 43us; 44us; 47us; 5us; 41us; 42us; 43us; 44us; 48us; 5us; 41us; 42us; 43us; 44us; 49us; 5us; 41us; 42us; 43us; 44us; 50us; 5us; 41us; 42us; 43us; 44us; 51us; 5us; 41us; 42us; 43us; 44us; 52us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 24us; 27us; 29us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 93us; 95us; 97us; 101us; 103us; 109us; 111us; 113us; 119us; 121us; 123us; 129us; 131us; 134us; 137us; 140us; 143us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 180us; 182us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 208us; 210us; 212us; 214us; 220us; 222us; 224us; 226us; 229us; 231us; 237us; 243us; 245us; 247us; 249us; 253us; 255us; 257us; 259us; 261us; 267us; 269us; 275us; 281us; 287us; 293us; 299us; 305us; 316us; 322us; 328us; 334us; 340us; 346us; 352us; 354us; 356us; 358us; 360us; 362us; 364us; 366us; 368us; 370us; 372us; 374us; 376us; |]
let _fsyacc_action_rows = 134
let _fsyacc_actionTableElements = [|10us; 32768us; 1us; 93us; 8us; 98us; 21us; 43us; 24us; 89us; 25us; 80us; 27us; 70us; 28us; 65us; 29us; 75us; 30us; 60us; 32us; 53us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 1us; 16386us; 6us; 5us; 1us; 32768us; 33us; 6us; 1us; 32768us; 5us; 7us; 0us; 16387us; 0us; 16388us; 3us; 16388us; 4us; 85us; 6us; 47us; 19us; 44us; 13us; 32768us; 1us; 93us; 8us; 98us; 21us; 9us; 22us; 25us; 23us; 15us; 24us; 89us; 25us; 80us; 26us; 4us; 27us; 70us; 28us; 65us; 29us; 75us; 30us; 60us; 32us; 53us; 0us; 16389us; 1us; 32768us; 21us; 20us; 1us; 32768us; 1us; 14us; 0us; 16391us; 1us; 32768us; 21us; 16us; 1us; 32768us; 19us; 17us; 2us; 32768us; 21us; 8us; 26us; 4us; 1us; 32768us; 1us; 19us; 0us; 16392us; 2us; 16396us; 2us; 32us; 4us; 21us; 2us; 16397us; 21us; 8us; 26us; 4us; 1us; 32768us; 3us; 23us; 1us; 32768us; 8us; 98us; 0us; 16393us; 1us; 32768us; 21us; 26us; 1us; 32768us; 4us; 27us; 2us; 16397us; 21us; 8us; 26us; 4us; 1us; 32768us; 3us; 29us; 1us; 32768us; 8us; 98us; 0us; 16394us; 1us; 16396us; 2us; 32us; 1us; 32768us; 21us; 31us; 0us; 16395us; 1us; 16398us; 2us; 35us; 2us; 32768us; 21us; 8us; 26us; 4us; 1us; 32768us; 21us; 37us; 0us; 16399us; 1us; 32768us; 21us; 39us; 0us; 16400us; 11us; 32768us; 1us; 93us; 7us; 99us; 8us; 98us; 21us; 43us; 24us; 89us; 25us; 80us; 27us; 70us; 28us; 65us; 29us; 75us; 30us; 60us; 32us; 53us; 0us; 16401us; 0us; 16402us; 3us; 32768us; 4us; 85us; 6us; 47us; 19us; 44us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 5us; 32768us; 1us; 46us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 0us; 16403us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 5us; 32768us; 5us; 49us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 1us; 32768us; 19us; 50us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 5us; 32768us; 1us; 52us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 0us; 16404us; 1us; 32768us; 4us; 54us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 1us; 32768us; 3us; 56us; 10us; 32768us; 1us; 93us; 8us; 98us; 21us; 43us; 24us; 89us; 25us; 80us; 27us; 70us; 28us; 65us; 29us; 75us; 30us; 60us; 32us; 53us; 1us; 16405us; 31us; 58us; 10us; 32768us; 1us; 93us; 8us; 98us; 21us; 43us; 24us; 89us; 25us; 80us; 27us; 70us; 28us; 65us; 29us; 75us; 30us; 60us; 32us; 53us; 0us; 16406us; 1us; 32768us; 4us; 61us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 1us; 32768us; 3us; 63us; 10us; 32768us; 1us; 93us; 8us; 98us; 21us; 43us; 24us; 89us; 25us; 80us; 27us; 70us; 28us; 65us; 29us; 75us; 30us; 60us; 32us; 53us; 0us; 16407us; 1us; 32768us; 4us; 66us; 1us; 32768us; 20us; 67us; 1us; 32768us; 3us; 68us; 1us; 32768us; 1us; 69us; 0us; 16408us; 1us; 32768us; 4us; 71us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 5us; 32768us; 3us; 73us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 1us; 32768us; 1us; 74us; 0us; 16409us; 1us; 32768us; 4us; 76us; 1us; 32768us; 21us; 77us; 1us; 32768us; 3us; 78us; 1us; 32768us; 1us; 79us; 0us; 16410us; 1us; 32768us; 4us; 81us; 1us; 32768us; 21us; 82us; 1us; 32768us; 3us; 83us; 1us; 32768us; 1us; 84us; 0us; 16411us; 4us; 16416us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 1us; 32768us; 3us; 87us; 1us; 32768us; 1us; 88us; 0us; 16412us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 5us; 32768us; 1us; 91us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 1us; 16417us; 2us; 95us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 16418us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 4us; 16419us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 0us; 16390us; 0us; 16420us; 0us; 16421us; 2us; 16422us; 4us; 102us; 6us; 105us; 4us; 16416us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 1us; 32768us; 3us; 104us; 0us; 16423us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 5us; 32768us; 5us; 107us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 0us; 16424us; 2us; 16425us; 9us; 124us; 10us; 123us; 2us; 16426us; 9us; 124us; 10us; 123us; 0us; 16427us; 0us; 16428us; 2us; 16429us; 9us; 124us; 10us; 123us; 5us; 32768us; 3us; 127us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 10us; 32768us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 13us; 133us; 14us; 132us; 15us; 131us; 16us; 130us; 17us; 129us; 18us; 128us; 4us; 16431us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 4us; 16432us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 4us; 16433us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 4us; 16434us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 4us; 16435us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 4us; 16436us; 9us; 124us; 10us; 123us; 11us; 122us; 12us; 121us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 0us; 16430us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; 4us; 32768us; 4us; 126us; 11us; 125us; 21us; 101us; 33us; 100us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 12us; 14us; 15us; 17us; 19us; 21us; 22us; 23us; 27us; 41us; 42us; 44us; 46us; 47us; 49us; 51us; 54us; 56us; 57us; 60us; 63us; 65us; 67us; 68us; 70us; 72us; 75us; 77us; 79us; 80us; 82us; 84us; 85us; 87us; 90us; 92us; 93us; 95us; 96us; 108us; 109us; 110us; 114us; 119us; 125us; 126us; 131us; 137us; 139us; 144us; 150us; 151us; 153us; 158us; 160us; 171us; 173us; 184us; 185us; 187us; 192us; 194us; 205us; 206us; 208us; 210us; 212us; 214us; 215us; 217us; 222us; 228us; 230us; 231us; 233us; 235us; 237us; 239us; 240us; 242us; 244us; 246us; 248us; 249us; 254us; 256us; 258us; 259us; 264us; 270us; 271us; 272us; 273us; 275us; 280us; 285us; 290us; 291us; 292us; 293us; 296us; 301us; 303us; 304us; 309us; 315us; 316us; 319us; 322us; 323us; 324us; 327us; 333us; 344us; 349us; 354us; 359us; 364us; 369us; 374us; 379us; 384us; 389us; 394us; 399us; 404us; 405us; 410us; 415us; 420us; 425us; 430us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 4us; 1us; 2us; 0us; 3us; 5us; 6us; 6us; 3us; 1us; 0us; 1us; 4us; 2us; 2us; 1us; 4us; 7us; 5us; 7us; 5us; 5us; 5us; 5us; 5us; 5us; 3us; 1us; 1us; 0us; 1us; 3us; 1us; 4us; 1us; 1us; 4us; 4us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 16387us; 16388us; 65535us; 65535us; 16389us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 16399us; 65535us; 16400us; 65535us; 16401us; 16402us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 16413us; 16414us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 16421us; 65535us; 65535us; 65535us; 16423us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 330 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 339 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                      _1 
                   )
# 51 "Parser.fsy"
                 : Stmt));
# 350 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                               Typ.Int 
                   )
# 53 "Parser.fsy"
                 : 'gentype_ty));
# 360 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                         Typ.Array(int _3) 
                   )
# 54 "Parser.fsy"
                 : 'gentype_ty));
# 371 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                              Typ.Name _1 
                   )
# 55 "Parser.fsy"
                 : 'gentype_ty));
# 382 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_decs in
            let _2 = parseState.GetInput(2) :?> 'gentype_dec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                      _1 @ _2 
                   )
# 57 "Parser.fsy"
                 : 'gentype_decs));
# 394 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                       [] 
                   )
# 58 "Parser.fsy"
                 : 'gentype_decs));
# 404 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ty in
            let _2 = parseState.GetInput(2) :?> 'gentype_ids in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                               List.map (fun id -> Dec.Var(_1, id)) _2 
                   )
# 61 "Parser.fsy"
                 : 'gentype_dec));
# 416 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                               [Dec.Type(_2, _4)] 
                   )
# 63 "Parser.fsy"
                 : 'gentype_dec));
# 428 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ty in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_fargs_opt in
            let _6 = parseState.GetInput(6) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                               [Dec.Func(_2, _4, _1, _6) ] 
                   )
# 65 "Parser.fsy"
                 : 'gentype_dec));
# 442 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_fargs_opt in
            let _6 = parseState.GetInput(6) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                               [Dec.Func(_2, _4, Typ.Void, _6)] 
                   )
# 67 "Parser.fsy"
                 : 'gentype_dec));
# 455 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_ids in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                         _1 :: _3 
                   )
# 69 "Parser.fsy"
                 : 'gentype_ids));
# 467 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                              [_1] 
                   )
# 70 "Parser.fsy"
                 : 'gentype_ids));
# 478 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                              [] 
                   )
# 72 "Parser.fsy"
                 : 'gentype_fargs_opt));
# 488 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fargs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                 _1 
                   )
# 73 "Parser.fsy"
                 : 'gentype_fargs_opt));
# 499 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fargs in
            let _3 = parseState.GetInput(3) :?> 'gentype_ty in
            let _4 = parseState.GetInput(4) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                   _1 @ [ _3, _4 ] 
                   )
# 75 "Parser.fsy"
                 : 'gentype_fargs));
# 512 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ty in
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                   [ _1, _2 ] 
                   )
# 76 "Parser.fsy"
                 : 'gentype_fargs));
# 524 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stmts in
            let _2 = parseState.GetInput(2) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                         _1 @ [ _2 ] 
                   )
# 78 "Parser.fsy"
                 : 'gentype_stmts));
# 536 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                [_1] 
                   )
# 79 "Parser.fsy"
                 : 'gentype_stmts));
# 547 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                             Stmt.Assign(Var _1, _3) 
                   )
# 82 "Parser.fsy"
                 : 'gentype_stmt));
# 559 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                             Stmt.Assign(IndexedVar(_1, _3), _6) 
                   )
# 84 "Parser.fsy"
                 : 'gentype_stmt));
# 572 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_cond in
            let _5 = parseState.GetInput(5) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                             Stmt.If(_3, _5, None) 
                   )
# 86 "Parser.fsy"
                 : 'gentype_stmt));
# 584 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_cond in
            let _5 = parseState.GetInput(5) :?> 'gentype_stmt in
            let _7 = parseState.GetInput(7) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                             Stmt.If(_3, _5, Some _7) 
                   )
# 88 "Parser.fsy"
                 : 'gentype_stmt));
# 597 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_cond in
            let _5 = parseState.GetInput(5) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                             Stmt.While(_3, _5) 
                   )
# 90 "Parser.fsy"
                 : 'gentype_stmt));
# 609 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                             Stmt.CallProc("sprint", [ Expr.Str _3 ]) 
                   )
# 92 "Parser.fsy"
                 : 'gentype_stmt));
# 620 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                             Stmt.CallProc("iprint", [ _3 ]) 
                   )
# 94 "Parser.fsy"
                 : 'gentype_stmt));
# 631 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                             Stmt.CallProc("scan", [ Expr.Var(Var _3) ]) 
                   )
# 96 "Parser.fsy"
                 : 'gentype_stmt));
# 642 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                             Stmt.CallProc("new", [ Expr.Var(Var _3) ]) 
                   )
# 98 "Parser.fsy"
                 : 'gentype_stmt));
# 653 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_aargs_opt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                             Stmt.CallProc(_1, _3) 
                   )
# 100 "Parser.fsy"
                 : 'gentype_stmt));
# 665 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                             Stmt.CallProc("return", [ _2 ]) 
                   )
# 102 "Parser.fsy"
                 : 'gentype_stmt));
# 676 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                             _1 
                   )
# 104 "Parser.fsy"
                 : 'gentype_stmt));
# 687 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                             Stmt.Nil 
                   )
# 106 "Parser.fsy"
                 : 'gentype_stmt));
# 697 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                               [] 
                   )
# 108 "Parser.fsy"
                 : 'gentype_aargs_opt));
# 707 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aargs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                               _1 
                   )
# 109 "Parser.fsy"
                 : 'gentype_aargs_opt));
# 718 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aargs in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                               _1 @ [ _3 ] 
                   )
# 111 "Parser.fsy"
                 : 'gentype_aargs));
# 730 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                               [ _1 ] 
                   )
# 112 "Parser.fsy"
                 : 'gentype_aargs));
# 741 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_decs in
            let _3 = parseState.GetInput(3) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                               Stmt.Block(_2, _3) 
                   )
# 114 "Parser.fsy"
                 : 'gentype_block));
# 753 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                               Expr.Num(int _1) 
                   )
# 116 "Parser.fsy"
                 : 'gentype_expr));
# 764 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                               Expr.Var(Var _1) 
                   )
# 117 "Parser.fsy"
                 : 'gentype_expr));
# 775 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_aargs_opt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                               Expr.Call(_1, _3) 
                   )
# 118 "Parser.fsy"
                 : 'gentype_expr));
# 787 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                               Expr.Var(IndexedVar(_1, _3)) 
                   )
# 119 "Parser.fsy"
                 : 'gentype_expr));
# 799 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                               Expr.Call("+", [ _1; _3 ]) 
                   )
# 120 "Parser.fsy"
                 : 'gentype_expr));
# 811 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                               Expr.Call("-", [ _1; _3 ]) 
                   )
# 121 "Parser.fsy"
                 : 'gentype_expr));
# 823 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                               Expr.Call("*", [ _1; _3 ]) 
                   )
# 122 "Parser.fsy"
                 : 'gentype_expr));
# 835 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                               Expr.Call("/", [ _1; _3 ]) 
                   )
# 123 "Parser.fsy"
                 : 'gentype_expr));
# 847 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                               Expr.Call("!", [ _2 ]) 
                   )
# 124 "Parser.fsy"
                 : 'gentype_expr));
# 858 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                               _2 
                   )
# 125 "Parser.fsy"
                 : 'gentype_expr));
# 869 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                               Expr.Call("==", [ _1; _3 ]) 
                   )
# 127 "Parser.fsy"
                 : 'gentype_cond));
# 881 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                               Expr.Call("!=", [ _1; _3 ]) 
                   )
# 128 "Parser.fsy"
                 : 'gentype_cond));
# 893 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                               Expr.Call(">", [ _1; _3 ]) 
                   )
# 129 "Parser.fsy"
                 : 'gentype_cond));
# 905 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                               Expr.Call("<", [ _1; _3 ]) 
                   )
# 130 "Parser.fsy"
                 : 'gentype_cond));
# 917 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                               Expr.Call(">=", [ _1; _3 ]) 
                   )
# 131 "Parser.fsy"
                 : 'gentype_cond));
# 929 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                               Expr.Call("<=", [ _1; _3 ]) 
                   )
# 132 "Parser.fsy"
                 : 'gentype_cond));
|]
# 942 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 37;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf : Stmt =
    engine lexer lexbuf 0 :?> _
