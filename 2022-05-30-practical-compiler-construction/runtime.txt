# ランタイム

実行環境: Linux (OS), x64 (アーキテクチャ) のみ想定する
アセンブリはAT&T記法で書く

アセンブリの構造
   データセクション (.data)
   テキストセクション (.text, プログラムを書く)

アセンブリ言語の概略
命令とラベルと並べる
命令のオペランドは3種類ある
   レジスタ(reg), 即値(imm), メモリ(mem)

アセンブリの基本的な命令
転送 mov src, dest
lea
   lea mem, dest
   lea label(%rip), dest
算術 neg, add, sub, imul, idiv
   符号拡張 cqto
比較 cmp
ジャンプ jmp, je, jg, jge, jl, jle, jne,
スタック push, pop
その他 leave, ret

関数呼び出し
呼び出し規約 (calling convention): 関数呼び出しの仕様
関数の呼び出し時にレジスタを保存したりスタックに戻りアドレスを配置したりする必要がある
関数の本体の先頭と末尾はスタックやレジスタを操作する一連の処理が含まれる (prologue, epilogue)

レジスタ
%rax など
%rbp frame ptr
%rsp stack ptr

System V AMD64 ABI (の一部)
スタックの構造 (上から下へ)
   以前のスタックポインタ、局所変数、レジスタ保存、引数(逆順)、戻りアドレス

整数の引数は6個までレジスタで渡す
   %rdi, %rsi, %rdx, %rcx, %r8, %r9
浮動小数点数の引数は2個までレジスタで渡す
   %xmm0, ..., %xmm7
それ以上の引数はフレームに積む
可変長引数のとき浮動小数点数である引数の個数を%raxに入れる
返戻値はレジスタで渡す
   %rax, %rdx
   %xmm0, %xmm1
関数の呼び出し側が保存するレジスタと呼び出される側(関数の本体)が保存するレジスタがある

局所関数をどうするか
関数がエスケープしないなら静的リンクかディスプレイで扱える
   静的リンク: 親である関数のフレームへのポインタを持つ
   ディスプレイ: レベルiのフレームへのポインタを静的変数の要素iに入れておく
